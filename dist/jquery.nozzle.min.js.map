{"version":3,"sources":["jquery.nozzle.js"],"names":["$","nozzle","version","renderTimeoutFunction","liveFilter","options","this","defaults","data","deferRender","deferRenderDelay","filters","filterCallback","render","renderCallback","saveInHash","params","extend","ignoreHashUpdate","forEach","filter","index","arr","sel","$el","is","on","e","window","restoreFromHash","query","selector","encodeURIComponent","val","hash","btoa","history","replaceState","undefined","location","filteredData","filterData","id","setTimeout","indexOf","atob","substring","split","i","length","keyval","decodeURIComponent","trigger","filtered","filterDefaults","attribute","match","matchCase","value","filterArr","isArray","push","toLowerCase","fval","findex","farr","testValArr","skip","attr","trim","attrName","attrIndex","attrArr","type","filterval","jQuery","thisMatch","testval","expect","regex","RegExp","modifiers","Model","Object","defineProperty","enumerable","writable","get","_data","set","_bindings","binding","idx","unbind","apply","addBinding","Binding","model","source","changeCallback","map","Watched","name","initValue","parent","$listeners","updateValue","notifyListeners","$source","self","$listener","each","$this","addListener","watch","watchObj","_watchObj","keys","tmp","watched","objFromPath","path","obj","pathArr","globalChangeCallback","el","evt","off","bind"],"mappings":"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","file":"jquery.nozzle.min.js","sourcesContent":["/* \n * jquery.nozzle \n * v1.0.0\n * Simple data filtering and manipulation library for jquery. \n * \n * Author: Marcin Jackowiak\n * Released under MIT License\n * \n */\n\n(function($) {\n    \n$.nozzle = {};\n$.nozzle.version = '1.0.0'\n$.nozzle.renderTimeoutFunction = null; \n\n/*\n * liveFilter\n * Apply a filter to the given dataset. Event listeners will be added automatically.\n */\n$.nozzle.liveFilter = function(options) {\n    \n    var liveFilter = this;        \n    var defaults = {        \n        data: null,\n        deferRender: true,\n        deferRenderDelay: 300,\n        filters: [],\n        filterCallback: null,\n        render: false,\n        renderCallback: null,\n        saveInHash: false\n    }        \n    \n    // Apply default options\n    var params = $.extend({}, defaults, options);    \n    \n    var ignoreHashUpdate = false;\n    \n    // Register event listeners\n    params.filters.forEach(function(filter, index, arr) {\n        var sel = filter['selector'];\n        if(sel !== null) {\n            var $el = $(sel);\n\n            if($el.is('select')) {\n                $el.on('change', function(e) {\n                    liveFilter.filter();\n                });\n            } else {\n                $el.on('keyup change', function(e) {\n                    liveFilter.filter();\n                });            \n            }\n        }\n    });\n    \n    if(params.saveInHash) {\n        $(window).on('hashchange', function() {\n            if(!ignoreHashUpdate) {\n                liveFilter.restoreFromHash();\n            }\n            ignoreHashUpdate = false;\n        });\n    }\n\n    liveFilter.filter = function() {\n        \n        if(params.saveInHash) {\n            var query = ''\n            params.filters.forEach(function(filter, index, arr) {                \n                var selector = filter['selector'];\n                if(typeof selector !== 'undefined') {\n                    var $el = $(selector);\n                    if(index > 0) query += '&';\n                    query += encodeURIComponent(selector)+'='+encodeURIComponent($el.val());\n                }\n            });            \n            var hash = 'JQN'+btoa(query);\n            if(window.history && window.history.replaceState) {\n                history.replaceState(undefined, undefined, '#'+hash);\n            } else {\n                // Fallback, will cause history entries to be added\n                location.hash = hash;\n            }\n        }\n        \n        var filteredData = $.nozzle.filterData(\n            params.data,\n            params.filters\n        );\n        if(typeof params.filterCallback === 'function') {\n            params.filterCallback(filteredData);\n        }\n        if(params.render && typeof params.renderCallback === 'function') {\n            if(params.deferRender) {\n                var id = setTimeout(function() {\n                    if($.nozzle.renderTimeoutFunction === id) {\n                        params.renderCallback(filteredData);\n                    }\n                }, params.deferRenderDelay);            \n                $.nozzle.renderTimeoutFunction = id;\n            } else {\n                params.renderCallback(filteredData);\n            }\n        }\n    }\n\n    // Restore selections from url hash\n    liveFilter.restoreFromHash = function() {\n        var hash = location.hash;\n        if(hash.indexOf('JQN') === 1) { // skip #\n            var query = atob(hash.substring(4));\n            var arr = query.split('&');\n            for(var i=0; i < arr.length; i++) {\n                var keyval = arr[i].split('=');\n                var sel = decodeURIComponent(keyval[0]);\n                var val = decodeURIComponent(keyval[1]);                \n                var $el = $(sel);\n                if($el.length > 0) $el.val(val).trigger('change');\n            }\n        }\n    }\n    \n    if(params.saveInHash) liveFilter.restoreFromHash();\n    \n};\n\n/*\n * filterData\n * Filter the data using provided filter array\n */\n$.nozzle.filterData = function(data, filters) {\n    var filtered = [];\n    var filterDefaults = {\n        attribute: null, // can be a comma separated list\n        match: 'contains', // contains, startsWith, endsWith, regex, exact\n        matchCase: false,\n        selector: null,\n        value: null\n    }\n       \n    var filterArr = [];\n    if($.isArray(filters)) {\n        filterArr = filters;\n    } else {\n        filterArr.push(filters);\n    }                \n    \n    // Prepare filters\n    filterArr.forEach(function(filter, index, arr) {\n        var selector = filter['selector'];\n        var value = null;\n        if(selector != null) {\n            value = $(selector).val();\n        } else {\n            value = filter['value'];\n        }\n        if(!filter['matchCase']) {\n            value = value.toLowerCase();\n        }\n        filter['_value'] = value;\n    });\n    \n    // Filter data\n    data.forEach(function(val, index, arr) {   \n        var match = true;\n\n        filterArr.forEach(function(fval, findex, farr) {\n           \n            var skip = false;\n\n            // Apply defaults\n            var filter = $.extend({}, filterDefaults, fval);\n\n            // Value to test            \n            var testValArr;\n            var attr = fval['attribute'];\n            if(attr.indexOf(',') < 0) {\n                // Single attribute\n                attr = attr.trim();\n                if(typeof val[attr] === 'undefined') {\n                    skip = true;\n                } else {\n                    testValArr = [filter['matchCase'] ? val[attr] : val[attr].toLowerCase()];\n                }\n            } else {\n                // Multiple attributes\n                testValArr = [];\n                attr.split(',').forEach(function(attrName, attrIndex, attrArr) {\n                    attrName = attrName.trim();\n                    if(typeof val[attrName] !== 'undefined') {\n                        testValArr.push(filter['matchCase'] ? val[attrName] : val[attrName].toLowerCase());\n                    }\n                });\n                if(testValArr.length === 0) skip = true; // continue to next forEach\n            }\n\n            if(skip) {\n                \n                match = false;\n                \n            } else {\n                var type = filter['match'];\n                var filterval = filter['_value'];\n\n                // Retrieve actual value to match if this is a jquery object\n                if(filterval instanceof jQuery) {\n                    filterval = filterval.val();\n                }\n\n                // Test each attribute\n                var thisMatch = false;\n                for(var i=0; i < testValArr.length; i++) {                     \n                    var testval = testValArr[i];\n\n                    if(type === 'contains') {   \n                        thisMatch = testval.indexOf(filterval) > -1;\n                    } else \n                    if(type === 'startsWith') {\n                        thisMatch = testval.indexOf(filterval) === 0;                        \n                    } else\n                    if(type === 'endsWith') {\n                        var expect = testval.length - filterval.length;\n                        if(testval.indexOf(filterval) === expect) {\n                            thisMatch = true;                                \n                        }\n                    } else \n                    if(type === 'exact') {\n                        thisMatch = filterval.length === 0 || testval === filterval;\n                    } else\n                    if(type === 'regex') {\n                        var regex = new RegExp(filterval);\n\n                        // Regex Modifiers\n                        var modifiers = 'g';\n                        if(!filter['matchCase']) {\n                            modifiers += 'i';\n                        }      \n\n                        if(testval.match(regex) != null) {\n                            thisMatch = true;\n                        }\n                    }\n                    \n                    if(thisMatch) break; // break out on first match\n                }\n                \n                match &= thisMatch;\n                \n            }\n\n        });\n\n        if(match) {\n            filtered.push(val);                \n            val['__index'] = index; // store original index\n        }                    \n    });  \n    \n    return filtered;\n};\n\n/*\n * Model class - used to encapsulate the data\n */\n$.nozzle.Model = function(data) {\n    Object.defineProperty(this, '_data', { \n        enumerable: false,\n        writable: true\n    });   \n    Object.defineProperty(this, '_bindings', { \n        enumerable: false,\n        writable: true\n    });       \n    Object.defineProperty(this, 'data', {\n        get: function() {\n            return this._data;\n        },\n        set: function(val) {            \n            this._data = val;\n            this._bindings.forEach(function(binding, idx) {\n                console.log('Rebinding');\n                binding.unbind();\n                binding.apply('data'); // rebind\n            });                        \n        }\n    });\n    this._bindings = [];\n    this.data = data;\n    \n    this.addBinding = function(binding) {\n        this._bindings.push(binding);\n    }\n};\n\n/*\n * Binding class - represents a set of bindings\n */\n$.nozzle.Binding = function(options) {\n    \n    var defaults = {        \n        model: null,\n        source: null,\n        changeCallback: null,\n        map: {\n        }\n    }        \n    \n    // Apply default options\n    var params = $.extend({}, defaults, options); \n    this.params = params;\n    \n    // Store binding reference\n    this.params.model.addBinding(this);\n    \n    var Watched = function(name, initValue, parent) {\n        Object.defineProperty(this, 'name', { \n            enumerable: false,\n            writable: true\n        });   \n        Object.defineProperty(this, 'value', { \n            enumerable: false,\n            writable: true\n        });      \n        Object.defineProperty(this, '$listeners', { \n            enumerable: false,\n            writable: true\n        });              \n        Object.defineProperty(this, 'attribute', { \n            enumerable: false,\n            writable: true\n        });   \n        Object.defineProperty(this, 'parent', { \n            enumerable: false,\n            writable: true\n        });          \n        this.name = '_'+name;\n        this.value = initValue;\n        this.attribute = name; \n        this.parent = parent;\n        this.$listeners = [];\n        \n        this.updateValue = function(value) {            \n            this.value = value;\n        }\n        \n        this.notifyListeners = function($source) {\n            var self = this;\n            this.$listeners.forEach(function($listener, idx, arr) {\n                $listener.each(function() {\n                    var $this = $(this);\n                    if(typeof $source === 'undefined' || $source === null || $this.get(0) !== $source.get(0)) {\n                        $this.val(self.value);\n                    }                    \n                });\n            });\n        }\n        \n        this.addListener = function($el) {\n            this.$listeners.push($el);\n        }\n    }\n    \n    var watch = function(watchObj, _watchObj) {\n        \n        Object.keys(watchObj).forEach(function(attr, idx, arr) {  \n            \n            var tmp = watchObj[attr];\n            Object.defineProperty(watchObj, '_'+attr, {\n                enumerable: false,\n                value: new Watched(attr, tmp, watchObj)\n            });\n            Object.defineProperty(watchObj, attr, {\n                get: function() {                                \n                    return this['_'+attr].value;\n                },\n                set: function(val) { \n                    var watched = watchObj['_'+attr];\n                    var old = watched.value;\n                    console.log('Changing ' + attr + ' from: ' + old +  ' to: ' + val);\n                    watched.value = val;\n                    watched.notifyListeners();\n                }\n            });\n            \n            if(typeof watchObj[attr] === 'object') {\n                watch(watchObj[attr], watchObj['_'+attr]);\n            }            \n        });        \n    };\n\n    var objFromPath = function(path) {\n        var obj = params.model.data;\n        var pathArr = path.split('.');\n        pathArr.forEach(function(attr, idx, arr) {\n            if(idx === arr.length - 1) {\n                attr = '_'+attr; // watchable\n            }\n            obj = obj[attr];\n        });\n        return obj;\n    };   \n    \n    this.apply = function(source) {\n        watch(params.model.data);\n        \n        var globalChangeCallback = params.changeCallback;\n        \n        Object.keys(params.map).forEach(function(el, idx, arr) {\n            var path = params.map[el].path;\n            var changeCallback = params.map[el].changeCallback;\n            console.log('Binding element='+el+', path='+path);\n            var watched = objFromPath(path);\n            if(typeof watched !== 'undefined') { // only if this data element exists        \n                \n                watched.addListener($(el));\n                \n                var evt = 'keyup.nozzle.bind';\n                if($(el).is('select')) {\n                    evt = 'change.nozzle.bind';\n                }\n                \n                $(el).on(evt, function(e) {        \n                    console.log(evt+' event on \"'+el+'\"');\n                    watched.updateValue($(this).val());\n                    watched.notifyListeners($(el));\n                    if(typeof changeCallback === 'function') {\n                        changeCallback('ui');\n                    }\n                    if(typeof globalChangeCallback === 'function') {\n                        globalChangeCallback('ui', path);\n                        console.log('globalChangeCallback path='+path);\n                    }\n                });           \n\n                if(source === 'data') {\n                    // Update the UI from data\n                    watched.notifyListeners(null);\n                } else\n                if(source === 'ui') {\n                    // Update the data from UI\n                    watched.updateValue($(el).val());\n                }\n            \n            }\n            \n        });  \n    };\n    \n    this.unbind = function() {\n        Object.keys(params.map).forEach(function(el, idx, arr) {\n            // Remove event listener\n            var evt = 'keyup.nozzle.bind';\n            if($(el).is('select')) {\n                evt = 'change.nozzle.bind';\n            }            \n            $(el).off(evt);\n        });\n    }\n    \n};\n\n$.nozzle.bind = function(options) {\n    var binding = new $.nozzle.Binding(options);\n    if(typeof options.source !== 'undefined') {\n        binding.apply(options.source);\n    } else {\n        binding.apply();\n    }\n};\n\n})(jQuery);"],"sourceRoot":"/source/"}